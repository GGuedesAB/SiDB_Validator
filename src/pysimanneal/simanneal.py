# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_simanneal')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_simanneal')
    _simanneal = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_simanneal', [dirname(__file__)])
        except ImportError:
            import _simanneal
            return _simanneal
        try:
            _mod = imp.load_module('_simanneal', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _simanneal = swig_import_helper()
    del swig_import_helper
else:
    import _simanneal
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simanneal.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _simanneal.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _simanneal.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _simanneal.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _simanneal.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _simanneal.SwigPyIterator_equal(self, x)

    def copy(self):
        return _simanneal.SwigPyIterator_copy(self)

    def next(self):
        return _simanneal.SwigPyIterator_next(self)

    def __next__(self):
        return _simanneal.SwigPyIterator___next__(self)

    def previous(self):
        return _simanneal.SwigPyIterator_previous(self)

    def advance(self, n):
        return _simanneal.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _simanneal.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _simanneal.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _simanneal.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _simanneal.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _simanneal.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _simanneal.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _simanneal.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _simanneal.ios_base_erase_event
    imbue_event = _simanneal.ios_base_imbue_event
    copyfmt_event = _simanneal.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _simanneal.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _simanneal.ios_base_flags(self, *args)

    def setf(self, *args):
        return _simanneal.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _simanneal.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _simanneal.ios_base_precision(self, *args)

    def width(self, *args):
        return _simanneal.ios_base_width(self, *args)
    if _newclass:
        sync_with_stdio = staticmethod(_simanneal.ios_base_sync_with_stdio)
    else:
        sync_with_stdio = _simanneal.ios_base_sync_with_stdio

    def imbue(self, __loc):
        return _simanneal.ios_base_imbue(self, __loc)

    def getloc(self):
        return _simanneal.ios_base_getloc(self)
    if _newclass:
        xalloc = staticmethod(_simanneal.ios_base_xalloc)
    else:
        xalloc = _simanneal.ios_base_xalloc

    def iword(self, __ix):
        return _simanneal.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _simanneal.ios_base_pword(self, __ix)
    __swig_destroy__ = _simanneal.delete_ios_base
    __del__ = lambda self: None
ios_base_swigregister = _simanneal.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _simanneal.cvar
ios_base.boolalpha = _simanneal.cvar.ios_base_boolalpha
ios_base.dec = _simanneal.cvar.ios_base_dec
ios_base.fixed = _simanneal.cvar.ios_base_fixed
ios_base.hex = _simanneal.cvar.ios_base_hex
ios_base.internal = _simanneal.cvar.ios_base_internal
ios_base.left = _simanneal.cvar.ios_base_left
ios_base.oct = _simanneal.cvar.ios_base_oct
ios_base.right = _simanneal.cvar.ios_base_right
ios_base.scientific = _simanneal.cvar.ios_base_scientific
ios_base.showbase = _simanneal.cvar.ios_base_showbase
ios_base.showpoint = _simanneal.cvar.ios_base_showpoint
ios_base.showpos = _simanneal.cvar.ios_base_showpos
ios_base.skipws = _simanneal.cvar.ios_base_skipws
ios_base.unitbuf = _simanneal.cvar.ios_base_unitbuf
ios_base.uppercase = _simanneal.cvar.ios_base_uppercase
ios_base.adjustfield = _simanneal.cvar.ios_base_adjustfield
ios_base.basefield = _simanneal.cvar.ios_base_basefield
ios_base.floatfield = _simanneal.cvar.ios_base_floatfield
ios_base.badbit = _simanneal.cvar.ios_base_badbit
ios_base.eofbit = _simanneal.cvar.ios_base_eofbit
ios_base.failbit = _simanneal.cvar.ios_base_failbit
ios_base.goodbit = _simanneal.cvar.ios_base_goodbit
ios_base.app = _simanneal.cvar.ios_base_app
ios_base.ate = _simanneal.cvar.ios_base_ate
ios_base.binary = _simanneal.cvar.ios_base_binary
ios_base.ios_base_in = _simanneal.cvar.ios_base_ios_base_in
ios_base.out = _simanneal.cvar.ios_base_out
ios_base.trunc = _simanneal.cvar.ios_base_trunc
ios_base.beg = _simanneal.cvar.ios_base_beg
ios_base.cur = _simanneal.cvar.ios_base_cur
ios_base.end = _simanneal.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _simanneal.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _simanneal.ios_base_sync_with_stdio

def ios_base_xalloc():
    return _simanneal.ios_base_xalloc()
ios_base_xalloc = _simanneal.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr

    def rdstate(self):
        return _simanneal.ios_rdstate(self)

    def clear(self, *args):
        return _simanneal.ios_clear(self, *args)

    def setstate(self, __state):
        return _simanneal.ios_setstate(self, __state)

    def good(self):
        return _simanneal.ios_good(self)

    def eof(self):
        return _simanneal.ios_eof(self)

    def fail(self):
        return _simanneal.ios_fail(self)

    def bad(self):
        return _simanneal.ios_bad(self)

    def exceptions(self, *args):
        return _simanneal.ios_exceptions(self, *args)

    def __init__(self, __sb):
        this = _simanneal.new_ios(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_ios
    __del__ = lambda self: None

    def tie(self, *args):
        return _simanneal.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _simanneal.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _simanneal.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _simanneal.ios_fill(self, *args)

    def imbue(self, __loc):
        return _simanneal.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _simanneal.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _simanneal.ios_widen(self, __c)
ios_swigregister = _simanneal.ios_swigregister
ios_swigregister(ios)

class streambuf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, streambuf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, streambuf, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _simanneal.delete_streambuf
    __del__ = lambda self: None

    def pubimbue(self, __loc):
        return _simanneal.streambuf_pubimbue(self, __loc)

    def getloc(self):
        return _simanneal.streambuf_getloc(self)

    def pubsetbuf(self, __s, __n):
        return _simanneal.streambuf_pubsetbuf(self, __s, __n)

    def pubseekoff(self, *args):
        return _simanneal.streambuf_pubseekoff(self, *args)

    def pubseekpos(self, *args):
        return _simanneal.streambuf_pubseekpos(self, *args)

    def pubsync(self):
        return _simanneal.streambuf_pubsync(self)

    def in_avail(self):
        return _simanneal.streambuf_in_avail(self)

    def snextc(self):
        return _simanneal.streambuf_snextc(self)

    def sbumpc(self):
        return _simanneal.streambuf_sbumpc(self)

    def sgetc(self):
        return _simanneal.streambuf_sgetc(self)

    def sgetn(self, __s, __n):
        return _simanneal.streambuf_sgetn(self, __s, __n)

    def sputbackc(self, __c):
        return _simanneal.streambuf_sputbackc(self, __c)

    def sungetc(self):
        return _simanneal.streambuf_sungetc(self)

    def sputc(self, __c):
        return _simanneal.streambuf_sputc(self, __c)

    def sputn(self, __s, __n):
        return _simanneal.streambuf_sputn(self, __s, __n)
streambuf_swigregister = _simanneal.streambuf_swigregister
streambuf_swigregister(streambuf)

class string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string, name)
    __repr__ = _swig_repr

    def length(self):
        return _simanneal.string_length(self)

    def max_size(self):
        return _simanneal.string_max_size(self)

    def capacity(self):
        return _simanneal.string_capacity(self)

    def reserve(self, __res_arg=0):
        return _simanneal.string_reserve(self, __res_arg)

    def copy(self, __s, __n, __pos=0):
        return _simanneal.string_copy(self, __s, __n, __pos)

    def c_str(self):
        return _simanneal.string_c_str(self)

    def find(self, *args):
        return _simanneal.string_find(self, *args)

    def rfind(self, *args):
        return _simanneal.string_rfind(self, *args)

    def find_first_of(self, *args):
        return _simanneal.string_find_first_of(self, *args)

    def find_last_of(self, *args):
        return _simanneal.string_find_last_of(self, *args)

    def find_first_not_of(self, *args):
        return _simanneal.string_find_first_not_of(self, *args)

    def find_last_not_of(self, *args):
        return _simanneal.string_find_last_not_of(self, *args)

    def substr(self, *args):
        return _simanneal.string_substr(self, *args)

    def empty(self):
        return _simanneal.string_empty(self)

    def size(self):
        return _simanneal.string_size(self)

    def swap(self, v):
        return _simanneal.string_swap(self, v)

    def begin(self):
        return _simanneal.string_begin(self)

    def end(self):
        return _simanneal.string_end(self)

    def rbegin(self):
        return _simanneal.string_rbegin(self)

    def rend(self):
        return _simanneal.string_rend(self)

    def get_allocator(self):
        return _simanneal.string_get_allocator(self)

    def erase(self, *args):
        return _simanneal.string_erase(self, *args)

    def __init__(self, *args):
        this = _simanneal.new_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        return _simanneal.string_assign(self, *args)

    def resize(self, *args):
        return _simanneal.string_resize(self, *args)

    def iterator(self):
        return _simanneal.string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.string___nonzero__(self)

    def __bool__(self):
        return _simanneal.string___bool__(self)

    def __len__(self):
        return _simanneal.string___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.string___setitem__(self, *args)

    def insert(self, *args):
        return _simanneal.string_insert(self, *args)

    def replace(self, *args):
        return _simanneal.string_replace(self, *args)

    def __iadd__(self, v):
        return _simanneal.string___iadd__(self, v)

    def __add__(self, v):
        return _simanneal.string___add__(self, v)

    def __radd__(self, v):
        return _simanneal.string___radd__(self, v)

    def __str__(self):
        return _simanneal.string___str__(self)

    def __rlshift__(self, out):
        return _simanneal.string___rlshift__(self, out)

    def __eq__(self, v):
        return _simanneal.string___eq__(self, v)

    def __ne__(self, v):
        return _simanneal.string___ne__(self, v)

    def __gt__(self, v):
        return _simanneal.string___gt__(self, v)

    def __lt__(self, v):
        return _simanneal.string___lt__(self, v)

    def __ge__(self, v):
        return _simanneal.string___ge__(self, v)

    def __le__(self, v):
        return _simanneal.string___le__(self, v)
    __swig_destroy__ = _simanneal.delete_string
    __del__ = lambda self: None
string_swigregister = _simanneal.string_swigregister
string_swigregister(string)
string.npos = _simanneal.cvar.string_npos

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _simanneal.new_ostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_ostream
    __del__ = lambda self: None

    def __lshift__(self, *args):
        return _simanneal.ostream___lshift__(self, *args)

    def put(self, __c):
        return _simanneal.ostream_put(self, __c)

    def write(self, __s, __n):
        return _simanneal.ostream_write(self, __s, __n)

    def flush(self):
        return _simanneal.ostream_flush(self)

    def tellp(self):
        return _simanneal.ostream_tellp(self)

    def seekp(self, *args):
        return _simanneal.ostream_seekp(self, *args)
ostream_swigregister = _simanneal.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _simanneal.new_istream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_istream
    __del__ = lambda self: None

    def __rshift__(self, *args):
        return _simanneal.istream___rshift__(self, *args)

    def gcount(self):
        return _simanneal.istream_gcount(self)

    def get(self, *args):
        return _simanneal.istream_get(self, *args)

    def getline(self, *args):
        return _simanneal.istream_getline(self, *args)

    def ignore(self, *args):
        return _simanneal.istream_ignore(self, *args)

    def peek(self):
        return _simanneal.istream_peek(self)

    def read(self, __s, __n):
        return _simanneal.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _simanneal.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _simanneal.istream_putback(self, __c)

    def unget(self):
        return _simanneal.istream_unget(self)

    def sync(self):
        return _simanneal.istream_sync(self)

    def tellg(self):
        return _simanneal.istream_tellg(self)

    def seekg(self, *args):
        return _simanneal.istream_seekg(self, *args)
istream_swigregister = _simanneal.istream_swigregister
istream_swigregister(istream)

class iostream(istream, ostream):
    __swig_setmethods__ = {}
    for _s in [istream, ostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream, ostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _simanneal.new_iostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_iostream
    __del__ = lambda self: None
iostream_swigregister = _simanneal.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _simanneal.endl_cb_ptr

def endl(arg1):
    return _simanneal.endl(arg1)
endl = _simanneal.endl
ends_cb_ptr = _simanneal.ends_cb_ptr

def ends(arg1):
    return _simanneal.ends(arg1)
ends = _simanneal.ends
flush_cb_ptr = _simanneal.flush_cb_ptr

def flush(arg1):
    return _simanneal.flush(arg1)
flush = _simanneal.flush
class istringstream(istream):
    __swig_setmethods__ = {}
    for _s in [istream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, istringstream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _simanneal.new_istringstream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_istringstream
    __del__ = lambda self: None

    def rdbuf(self):
        return _simanneal.istringstream_rdbuf(self)

    def str(self, *args):
        return _simanneal.istringstream_str(self, *args)
istringstream_swigregister = _simanneal.istringstream_swigregister
istringstream_swigregister(istringstream)

class ostringstream(ostream):
    __swig_setmethods__ = {}
    for _s in [ostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [ostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostringstream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _simanneal.new_ostringstream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_ostringstream
    __del__ = lambda self: None

    def rdbuf(self):
        return _simanneal.ostringstream_rdbuf(self)

    def str(self):
        return _simanneal.ostringstream_str(self)
ostringstream_swigregister = _simanneal.ostringstream_swigregister
ostringstream_swigregister(ostringstream)

class stringstream(iostream):
    __swig_setmethods__ = {}
    for _s in [iostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, stringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [iostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, stringstream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _simanneal.new_stringstream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_stringstream
    __del__ = lambda self: None

    def rdbuf(self):
        return _simanneal.stringstream_rdbuf(self)

    def str(self, *args):
        return _simanneal.stringstream_str(self, *args)
stringstream_swigregister = _simanneal.stringstream_swigregister
stringstream_swigregister(stringstream)

class NullBuff(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullBuff, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NullBuff, name)
    __repr__ = _swig_repr

    def overflow(self, c):
        return _simanneal.NullBuff_overflow(self, c)

    def __init__(self):
        this = _simanneal.new_NullBuff()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_NullBuff
    __del__ = lambda self: None
NullBuff_swigregister = _simanneal.NullBuff_swigregister
NullBuff_swigregister(NullBuff)

class nostream(ostream):
    __swig_setmethods__ = {}
    for _s in [ostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, nostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, nostream, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _simanneal.new_nostream()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_nostream
    __del__ = lambda self: None
nostream_swigregister = _simanneal.nostream_swigregister
nostream_swigregister(nostream)

class Logger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
    __repr__ = _swig_repr
    MSG = _simanneal.Logger_MSG
    CRT = _simanneal.Logger_CRT
    WRN = _simanneal.Logger_WRN
    DBG = _simanneal.Logger_DBG

    def __init__(self, *args):
        this = _simanneal.new_Logger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def debug(self):
        return _simanneal.Logger_debug(self)

    def warning(self):
        return _simanneal.Logger_warning(self)

    def critical(self):
        return _simanneal.Logger_critical(self)

    def echo(self):
        return _simanneal.Logger_echo(self)
    __swig_destroy__ = _simanneal.delete_Logger
    __del__ = lambda self: None
Logger_swigregister = _simanneal.Logger_swigregister
Logger_swigregister(Logger)

class Stopwatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stopwatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stopwatch, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _simanneal.new_Stopwatch()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_Stopwatch
    __del__ = lambda self: None

    def start(self):
        return _simanneal.Stopwatch_start(self)

    def end(self):
        return _simanneal.Stopwatch_end(self)

    def startCount(self):
        return _simanneal.Stopwatch_startCount(self)

    def wallTime(self):
        return _simanneal.Stopwatch_wallTime(self)

    def CPUTime(self):
        return _simanneal.Stopwatch_CPUTime(self)
Stopwatch_swigregister = _simanneal.Stopwatch_swigregister
Stopwatch_swigregister(Stopwatch)

class TimeKeeper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeKeeper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeKeeper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _simanneal.new_TimeKeeper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_TimeKeeper
    __del__ = lambda self: None
    if _newclass:
        instance = staticmethod(_simanneal.TimeKeeper_instance)
    else:
        instance = _simanneal.TimeKeeper_instance

    def createStopwatch(self, key):
        return _simanneal.TimeKeeper_createStopwatch(self, key)

    def getStopwatch(self, key):
        return _simanneal.TimeKeeper_getStopwatch(self, key)

    def printStopwatch(self, key):
        return _simanneal.TimeKeeper_printStopwatch(self, key)

    def printAllStopwatches(self):
        return _simanneal.TimeKeeper_printAllStopwatches(self)
TimeKeeper_swigregister = _simanneal.TimeKeeper_swigregister
TimeKeeper_swigregister(TimeKeeper)

def TimeKeeper_instance():
    return _simanneal.TimeKeeper_instance()
TimeKeeper_instance = _simanneal.TimeKeeper_instance

LinearSchedule = _simanneal.LinearSchedule
ExponentialSchedule = _simanneal.ExponentialSchedule
class SimParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimParams, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _simanneal.new_SimParams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setDBLocs(self, *args):
        return _simanneal.SimParams_setDBLocs(self, *args)
    if _newclass:
        latToEuclCoord = staticmethod(_simanneal.SimParams_latToEuclCoord)
    else:
        latToEuclCoord = _simanneal.SimParams_latToEuclCoord
    __swig_setmethods__["anneal_cycles"] = _simanneal.SimParams_anneal_cycles_set
    __swig_getmethods__["anneal_cycles"] = _simanneal.SimParams_anneal_cycles_get
    if _newclass:
        anneal_cycles = _swig_property(_simanneal.SimParams_anneal_cycles_get, _simanneal.SimParams_anneal_cycles_set)
    __swig_setmethods__["T_e_inv_point"] = _simanneal.SimParams_T_e_inv_point_set
    __swig_getmethods__["T_e_inv_point"] = _simanneal.SimParams_T_e_inv_point_get
    if _newclass:
        T_e_inv_point = _swig_property(_simanneal.SimParams_T_e_inv_point_get, _simanneal.SimParams_T_e_inv_point_set)
    __swig_setmethods__["v_freeze_end_point"] = _simanneal.SimParams_v_freeze_end_point_set
    __swig_getmethods__["v_freeze_end_point"] = _simanneal.SimParams_v_freeze_end_point_get
    if _newclass:
        v_freeze_end_point = _swig_property(_simanneal.SimParams_v_freeze_end_point_get, _simanneal.SimParams_v_freeze_end_point_set)
    __swig_setmethods__["num_instances"] = _simanneal.SimParams_num_instances_set
    __swig_getmethods__["num_instances"] = _simanneal.SimParams_num_instances_get
    if _newclass:
        num_instances = _swig_property(_simanneal.SimParams_num_instances_get, _simanneal.SimParams_num_instances_set)
    __swig_setmethods__["result_queue_factor"] = _simanneal.SimParams_result_queue_factor_set
    __swig_getmethods__["result_queue_factor"] = _simanneal.SimParams_result_queue_factor_get
    if _newclass:
        result_queue_factor = _swig_property(_simanneal.SimParams_result_queue_factor_get, _simanneal.SimParams_result_queue_factor_set)
    __swig_setmethods__["result_queue_size"] = _simanneal.SimParams_result_queue_size_set
    __swig_getmethods__["result_queue_size"] = _simanneal.SimParams_result_queue_size_get
    if _newclass:
        result_queue_size = _swig_property(_simanneal.SimParams_result_queue_size_get, _simanneal.SimParams_result_queue_size_set)
    __swig_setmethods__["hop_attempt_factor"] = _simanneal.SimParams_hop_attempt_factor_set
    __swig_getmethods__["hop_attempt_factor"] = _simanneal.SimParams_hop_attempt_factor_get
    if _newclass:
        hop_attempt_factor = _swig_property(_simanneal.SimParams_hop_attempt_factor_get, _simanneal.SimParams_hop_attempt_factor_set)
    __swig_setmethods__["preanneal_cycles"] = _simanneal.SimParams_preanneal_cycles_set
    __swig_getmethods__["preanneal_cycles"] = _simanneal.SimParams_preanneal_cycles_get
    if _newclass:
        preanneal_cycles = _swig_property(_simanneal.SimParams_preanneal_cycles_get, _simanneal.SimParams_preanneal_cycles_set)
    __swig_setmethods__["T_schedule"] = _simanneal.SimParams_T_schedule_set
    __swig_getmethods__["T_schedule"] = _simanneal.SimParams_T_schedule_get
    if _newclass:
        T_schedule = _swig_property(_simanneal.SimParams_T_schedule_get, _simanneal.SimParams_T_schedule_set)
    __swig_setmethods__["alpha"] = _simanneal.SimParams_alpha_set
    __swig_getmethods__["alpha"] = _simanneal.SimParams_alpha_get
    if _newclass:
        alpha = _swig_property(_simanneal.SimParams_alpha_get, _simanneal.SimParams_alpha_set)
    __swig_setmethods__["T_init"] = _simanneal.SimParams_T_init_set
    __swig_getmethods__["T_init"] = _simanneal.SimParams_T_init_get
    if _newclass:
        T_init = _swig_property(_simanneal.SimParams_T_init_get, _simanneal.SimParams_T_init_set)
    __swig_setmethods__["T_min"] = _simanneal.SimParams_T_min_set
    __swig_getmethods__["T_min"] = _simanneal.SimParams_T_min_get
    if _newclass:
        T_min = _swig_property(_simanneal.SimParams_T_min_get, _simanneal.SimParams_T_min_set)
    __swig_setmethods__["v_freeze_init"] = _simanneal.SimParams_v_freeze_init_set
    __swig_getmethods__["v_freeze_init"] = _simanneal.SimParams_v_freeze_init_get
    if _newclass:
        v_freeze_init = _swig_property(_simanneal.SimParams_v_freeze_init_get, _simanneal.SimParams_v_freeze_init_set)
    __swig_setmethods__["v_freeze_threshold"] = _simanneal.SimParams_v_freeze_threshold_set
    __swig_getmethods__["v_freeze_threshold"] = _simanneal.SimParams_v_freeze_threshold_get
    if _newclass:
        v_freeze_threshold = _swig_property(_simanneal.SimParams_v_freeze_threshold_get, _simanneal.SimParams_v_freeze_threshold_set)
    __swig_setmethods__["v_freeze_reset"] = _simanneal.SimParams_v_freeze_reset_set
    __swig_getmethods__["v_freeze_reset"] = _simanneal.SimParams_v_freeze_reset_get
    if _newclass:
        v_freeze_reset = _swig_property(_simanneal.SimParams_v_freeze_reset_get, _simanneal.SimParams_v_freeze_reset_set)
    __swig_setmethods__["v_freeze_cycles"] = _simanneal.SimParams_v_freeze_cycles_set
    __swig_getmethods__["v_freeze_cycles"] = _simanneal.SimParams_v_freeze_cycles_get
    if _newclass:
        v_freeze_cycles = _swig_property(_simanneal.SimParams_v_freeze_cycles_get, _simanneal.SimParams_v_freeze_cycles_set)
    __swig_setmethods__["phys_validity_check_cycles"] = _simanneal.SimParams_phys_validity_check_cycles_set
    __swig_getmethods__["phys_validity_check_cycles"] = _simanneal.SimParams_phys_validity_check_cycles_get
    if _newclass:
        phys_validity_check_cycles = _swig_property(_simanneal.SimParams_phys_validity_check_cycles_get, _simanneal.SimParams_phys_validity_check_cycles_set)
    __swig_setmethods__["strategic_v_freeze_reset"] = _simanneal.SimParams_strategic_v_freeze_reset_set
    __swig_getmethods__["strategic_v_freeze_reset"] = _simanneal.SimParams_strategic_v_freeze_reset_get
    if _newclass:
        strategic_v_freeze_reset = _swig_property(_simanneal.SimParams_strategic_v_freeze_reset_get, _simanneal.SimParams_strategic_v_freeze_reset_set)
    __swig_setmethods__["reset_T_during_v_freeze_reset"] = _simanneal.SimParams_reset_T_during_v_freeze_reset_set
    __swig_getmethods__["reset_T_during_v_freeze_reset"] = _simanneal.SimParams_reset_T_during_v_freeze_reset_get
    if _newclass:
        reset_T_during_v_freeze_reset = _swig_property(_simanneal.SimParams_reset_T_during_v_freeze_reset_get, _simanneal.SimParams_reset_T_during_v_freeze_reset_set)
    __swig_setmethods__["Kc"] = _simanneal.SimParams_Kc_set
    __swig_getmethods__["Kc"] = _simanneal.SimParams_Kc_get
    if _newclass:
        Kc = _swig_property(_simanneal.SimParams_Kc_get, _simanneal.SimParams_Kc_set)
    __swig_setmethods__["kT_min"] = _simanneal.SimParams_kT_min_set
    __swig_getmethods__["kT_min"] = _simanneal.SimParams_kT_min_get
    if _newclass:
        kT_min = _swig_property(_simanneal.SimParams_kT_min_get, _simanneal.SimParams_kT_min_set)
    __swig_setmethods__["v_freeze_step"] = _simanneal.SimParams_v_freeze_step_set
    __swig_getmethods__["v_freeze_step"] = _simanneal.SimParams_v_freeze_step_get
    if _newclass:
        v_freeze_step = _swig_property(_simanneal.SimParams_v_freeze_step_get, _simanneal.SimParams_v_freeze_step_set)
    __swig_setmethods__["mu"] = _simanneal.SimParams_mu_set
    __swig_getmethods__["mu"] = _simanneal.SimParams_mu_get
    if _newclass:
        mu = _swig_property(_simanneal.SimParams_mu_get, _simanneal.SimParams_mu_set)
    __swig_setmethods__["eps_r"] = _simanneal.SimParams_eps_r_set
    __swig_getmethods__["eps_r"] = _simanneal.SimParams_eps_r_get
    if _newclass:
        eps_r = _swig_property(_simanneal.SimParams_eps_r_get, _simanneal.SimParams_eps_r_set)
    __swig_setmethods__["debye_length"] = _simanneal.SimParams_debye_length_set
    __swig_getmethods__["debye_length"] = _simanneal.SimParams_debye_length_get
    if _newclass:
        debye_length = _swig_property(_simanneal.SimParams_debye_length_get, _simanneal.SimParams_debye_length_set)
    __swig_setmethods__["n_dbs"] = _simanneal.SimParams_n_dbs_set
    __swig_getmethods__["n_dbs"] = _simanneal.SimParams_n_dbs_get
    if _newclass:
        n_dbs = _swig_property(_simanneal.SimParams_n_dbs_get, _simanneal.SimParams_n_dbs_set)
    __swig_setmethods__["db_locs"] = _simanneal.SimParams_db_locs_set
    __swig_getmethods__["db_locs"] = _simanneal.SimParams_db_locs_get
    if _newclass:
        db_locs = _swig_property(_simanneal.SimParams_db_locs_get, _simanneal.SimParams_db_locs_set)
    __swig_setmethods__["db_r"] = _simanneal.SimParams_db_r_set
    __swig_getmethods__["db_r"] = _simanneal.SimParams_db_r_get
    if _newclass:
        db_r = _swig_property(_simanneal.SimParams_db_r_get, _simanneal.SimParams_db_r_set)
    __swig_setmethods__["v_ij"] = _simanneal.SimParams_v_ij_set
    __swig_getmethods__["v_ij"] = _simanneal.SimParams_v_ij_get
    if _newclass:
        v_ij = _swig_property(_simanneal.SimParams_v_ij_get, _simanneal.SimParams_v_ij_set)
    __swig_setmethods__["v_ext"] = _simanneal.SimParams_v_ext_set
    __swig_getmethods__["v_ext"] = _simanneal.SimParams_v_ext_get
    if _newclass:
        v_ext = _swig_property(_simanneal.SimParams_v_ext_get, _simanneal.SimParams_v_ext_set)

    def pySetVExt(self, s_vec):
        return _simanneal.SimParams_pySetVExt(self, s_vec)

    def set_db_locs(self, db_locs):
        if len(db_locs[0]) == 3:
            dbs = IntVectorVector(db_locs)
        elif len(db_locs[0]) == 2:
            dbs = FloatPairVector(db_locs)
        else:
            raise Exception('db_locs[0] must have a length of 2 or 3.')
        self.setDBLocs(dbs)

    def set_v_ext(self, v_ext):
        self.pySetVExt(FloatVector(v_ext))

    def set_param(self, pname, pval):
        try:
            self.__swig_setmethods__[pname](self, pval)
        except KeyError:
            print(f'set_param error: {pname} is not a valid SimParams parameter.')
            raise

    __swig_destroy__ = _simanneal.delete_SimParams
    __del__ = lambda self: None
SimParams_swigregister = _simanneal.SimParams_swigregister
SimParams_swigregister(SimParams)
lat_a = cvar.lat_a
lat_b = cvar.lat_b
lat_c = cvar.lat_c
eta = cvar.eta
Q0 = cvar.Q0
PI = cvar.PI
EPS0 = cvar.EPS0
Kb = cvar.Kb
ERFDB = cvar.ERFDB
POP_STABILITY_ERR = cvar.POP_STABILITY_ERR
RECALC_STABILITY_ERR = cvar.RECALC_STABILITY_ERR

def SimParams_latToEuclCoord(n, m, l):
    return _simanneal.SimParams_latToEuclCoord(n, m, l)
SimParams_latToEuclCoord = _simanneal.SimParams_latToEuclCoord

class ChargeConfigResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChargeConfigResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChargeConfigResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _simanneal.new_ChargeConfigResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isResult(self):
        return _simanneal.ChargeConfigResult_isResult(self)
    __swig_setmethods__["initialized"] = _simanneal.ChargeConfigResult_initialized_set
    __swig_getmethods__["initialized"] = _simanneal.ChargeConfigResult_initialized_get
    if _newclass:
        initialized = _swig_property(_simanneal.ChargeConfigResult_initialized_get, _simanneal.ChargeConfigResult_initialized_set)
    __swig_setmethods__["config"] = _simanneal.ChargeConfigResult_config_set
    __swig_getmethods__["config"] = _simanneal.ChargeConfigResult_config_get
    if _newclass:
        config = _swig_property(_simanneal.ChargeConfigResult_config_get, _simanneal.ChargeConfigResult_config_set)
    __swig_setmethods__["pop_likely_stable"] = _simanneal.ChargeConfigResult_pop_likely_stable_set
    __swig_getmethods__["pop_likely_stable"] = _simanneal.ChargeConfigResult_pop_likely_stable_get
    if _newclass:
        pop_likely_stable = _swig_property(_simanneal.ChargeConfigResult_pop_likely_stable_get, _simanneal.ChargeConfigResult_pop_likely_stable_set)
    __swig_setmethods__["system_energy"] = _simanneal.ChargeConfigResult_system_energy_set
    __swig_getmethods__["system_energy"] = _simanneal.ChargeConfigResult_system_energy_get
    if _newclass:
        system_energy = _swig_property(_simanneal.ChargeConfigResult_system_energy_get, _simanneal.ChargeConfigResult_system_energy_set)
    __swig_destroy__ = _simanneal.delete_ChargeConfigResult
    __del__ = lambda self: None
ChargeConfigResult_swigregister = _simanneal.ChargeConfigResult_swigregister
ChargeConfigResult_swigregister(ChargeConfigResult)

class TimeInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wall_time"] = _simanneal.TimeInfo_wall_time_set
    __swig_getmethods__["wall_time"] = _simanneal.TimeInfo_wall_time_get
    if _newclass:
        wall_time = _swig_property(_simanneal.TimeInfo_wall_time_get, _simanneal.TimeInfo_wall_time_set)
    __swig_setmethods__["cpu_time"] = _simanneal.TimeInfo_cpu_time_set
    __swig_getmethods__["cpu_time"] = _simanneal.TimeInfo_cpu_time_get
    if _newclass:
        cpu_time = _swig_property(_simanneal.TimeInfo_cpu_time_get, _simanneal.TimeInfo_cpu_time_set)

    def __init__(self):
        this = _simanneal.new_TimeInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_TimeInfo
    __del__ = lambda self: None
TimeInfo_swigregister = _simanneal.TimeInfo_swigregister
TimeInfo_swigregister(TimeInfo)

class SimAnneal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimAnneal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimAnneal, name)
    __repr__ = _swig_repr

    def __init__(self, sparams):
        this = _simanneal.new_SimAnneal(sparams)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def invokeSimAnneal(self):
        return _simanneal.SimAnneal_invokeSimAnneal(self)
    if _newclass:
        systemEnergy = staticmethod(_simanneal.SimAnneal_systemEnergy)
    else:
        systemEnergy = _simanneal.SimAnneal_systemEnergy
    if _newclass:
        isMetastable = staticmethod(_simanneal.SimAnneal_isMetastable)
    else:
        isMetastable = _simanneal.SimAnneal_isMetastable
    if _newclass:
        configToStr = staticmethod(_simanneal.SimAnneal_configToStr)
    else:
        configToStr = _simanneal.SimAnneal_configToStr
    if _newclass:
        storeResults = staticmethod(_simanneal.SimAnneal_storeResults)
    else:
        storeResults = _simanneal.SimAnneal_storeResults

    def chargeResults(self):
        return _simanneal.SimAnneal_chargeResults(self)

    def energyResults(self):
        return _simanneal.SimAnneal_energyResults(self)

    def suggestedConfigResults(self, tidy):
        return _simanneal.SimAnneal_suggestedConfigResults(self, tidy)
    __swig_setmethods__["sim_params"] = _simanneal.SimAnneal_sim_params_set
    __swig_getmethods__["sim_params"] = _simanneal.SimAnneal_sim_params_get
    if _newclass:
        sim_params = _swig_property(_simanneal.SimAnneal_sim_params_get, _simanneal.SimAnneal_sim_params_set)

    def pySuggestedResults(self, tidy):
        return _simanneal.SimAnneal_pySuggestedResults(self, tidy)

    from collections import namedtuple
    ChargeResult = namedtuple('ChargeResult', ['config', 'energy'])

    def suggested_gs_results(self, tidy=True):
        configs = []
        for conf in self.pySuggestedResults(tidy):
            chg_cfg = [chg for chg in conf[0]]
            configs.append(self.ChargeResult(chg_cfg, conf[1]))
        return configs

    __swig_destroy__ = _simanneal.delete_SimAnneal
    __del__ = lambda self: None
SimAnneal_swigregister = _simanneal.SimAnneal_swigregister
SimAnneal_swigregister(SimAnneal)

def SimAnneal_systemEnergy(n_in, qubo=False):
    return _simanneal.SimAnneal_systemEnergy(n_in, qubo)
SimAnneal_systemEnergy = _simanneal.SimAnneal_systemEnergy

def SimAnneal_isMetastable(n_in):
    return _simanneal.SimAnneal_isMetastable(n_in)
SimAnneal_isMetastable = _simanneal.SimAnneal_isMetastable

def SimAnneal_configToStr(n_in):
    return _simanneal.SimAnneal_configToStr(n_in)
SimAnneal_configToStr = _simanneal.SimAnneal_configToStr

def SimAnneal_storeResults(annealer, thread_id):
    return _simanneal.SimAnneal_storeResults(annealer, thread_id)
SimAnneal_storeResults = _simanneal.SimAnneal_storeResults

class SimAnnealThread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimAnnealThread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimAnnealThread, name)
    __repr__ = _swig_repr
    PopulationUpdateMode = _simanneal.SimAnnealThread_PopulationUpdateMode
    PhysicalValidityCheckMode = _simanneal.SimAnnealThread_PhysicalValidityCheckMode
    PopulationUpdateFinished = _simanneal.SimAnnealThread_PopulationUpdateFinished

    def __init__(self, t_thread_id, seed):
        this = _simanneal.new_SimAnnealThread(t_thread_id, seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simanneal.delete_SimAnnealThread
    __del__ = lambda self: None

    def run(self):
        return _simanneal.SimAnnealThread_run(self)

    def suggestedConfig(self):
        return _simanneal.SimAnnealThread_suggestedConfig(self)
    __swig_setmethods__["thread_id"] = _simanneal.SimAnnealThread_thread_id_set
    __swig_getmethods__["thread_id"] = _simanneal.SimAnnealThread_thread_id_get
    if _newclass:
        thread_id = _swig_property(_simanneal.SimAnnealThread_thread_id_get, _simanneal.SimAnnealThread_thread_id_set)
    __swig_setmethods__["db_charges"] = _simanneal.SimAnnealThread_db_charges_set
    __swig_getmethods__["db_charges"] = _simanneal.SimAnnealThread_db_charges_get
    if _newclass:
        db_charges = _swig_property(_simanneal.SimAnnealThread_db_charges_get, _simanneal.SimAnnealThread_db_charges_set)
    __swig_setmethods__["config_energies"] = _simanneal.SimAnnealThread_config_energies_set
    __swig_getmethods__["config_energies"] = _simanneal.SimAnnealThread_config_energies_get
    if _newclass:
        config_energies = _swig_property(_simanneal.SimAnnealThread_config_energies_get, _simanneal.SimAnnealThread_config_energies_set)
SimAnnealThread_swigregister = _simanneal.SimAnnealThread_swigregister
SimAnnealThread_swigregister(SimAnnealThread)

class DoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _simanneal.new_DoublePair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _simanneal.DoublePair_first_set
    __swig_getmethods__["first"] = _simanneal.DoublePair_first_get
    if _newclass:
        first = _swig_property(_simanneal.DoublePair_first_get, _simanneal.DoublePair_first_set)
    __swig_setmethods__["second"] = _simanneal.DoublePair_second_set
    __swig_getmethods__["second"] = _simanneal.DoublePair_second_get
    if _newclass:
        second = _swig_property(_simanneal.DoublePair_second_get, _simanneal.DoublePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _simanneal.delete_DoublePair
    __del__ = lambda self: None
DoublePair_swigregister = _simanneal.DoublePair_swigregister
DoublePair_swigregister(DoublePair)

class DoublePairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePairVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.DoublePairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.DoublePairVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.DoublePairVector___bool__(self)

    def __len__(self):
        return _simanneal.DoublePairVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.DoublePairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.DoublePairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.DoublePairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.DoublePairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.DoublePairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.DoublePairVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.DoublePairVector_pop(self)

    def append(self, x):
        return _simanneal.DoublePairVector_append(self, x)

    def empty(self):
        return _simanneal.DoublePairVector_empty(self)

    def size(self):
        return _simanneal.DoublePairVector_size(self)

    def swap(self, v):
        return _simanneal.DoublePairVector_swap(self, v)

    def begin(self):
        return _simanneal.DoublePairVector_begin(self)

    def end(self):
        return _simanneal.DoublePairVector_end(self)

    def rbegin(self):
        return _simanneal.DoublePairVector_rbegin(self)

    def rend(self):
        return _simanneal.DoublePairVector_rend(self)

    def clear(self):
        return _simanneal.DoublePairVector_clear(self)

    def get_allocator(self):
        return _simanneal.DoublePairVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.DoublePairVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.DoublePairVector_erase(self, *args)

    def __init__(self, *args):
        this = _simanneal.new_DoublePairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simanneal.DoublePairVector_push_back(self, x)

    def front(self):
        return _simanneal.DoublePairVector_front(self)

    def back(self):
        return _simanneal.DoublePairVector_back(self)

    def assign(self, n, x):
        return _simanneal.DoublePairVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.DoublePairVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.DoublePairVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.DoublePairVector_reserve(self, n)

    def capacity(self):
        return _simanneal.DoublePairVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_DoublePairVector
    __del__ = lambda self: None
DoublePairVector_swigregister = _simanneal.DoublePairVector_swigregister
DoublePairVector_swigregister(DoublePairVector)

class FloatPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _simanneal.new_FloatPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _simanneal.FloatPair_first_set
    __swig_getmethods__["first"] = _simanneal.FloatPair_first_get
    if _newclass:
        first = _swig_property(_simanneal.FloatPair_first_get, _simanneal.FloatPair_first_set)
    __swig_setmethods__["second"] = _simanneal.FloatPair_second_set
    __swig_getmethods__["second"] = _simanneal.FloatPair_second_get
    if _newclass:
        second = _swig_property(_simanneal.FloatPair_second_get, _simanneal.FloatPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _simanneal.delete_FloatPair
    __del__ = lambda self: None
FloatPair_swigregister = _simanneal.FloatPair_swigregister
FloatPair_swigregister(FloatPair)

class FloatPairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatPairVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.FloatPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.FloatPairVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.FloatPairVector___bool__(self)

    def __len__(self):
        return _simanneal.FloatPairVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.FloatPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.FloatPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.FloatPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.FloatPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.FloatPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.FloatPairVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.FloatPairVector_pop(self)

    def append(self, x):
        return _simanneal.FloatPairVector_append(self, x)

    def empty(self):
        return _simanneal.FloatPairVector_empty(self)

    def size(self):
        return _simanneal.FloatPairVector_size(self)

    def swap(self, v):
        return _simanneal.FloatPairVector_swap(self, v)

    def begin(self):
        return _simanneal.FloatPairVector_begin(self)

    def end(self):
        return _simanneal.FloatPairVector_end(self)

    def rbegin(self):
        return _simanneal.FloatPairVector_rbegin(self)

    def rend(self):
        return _simanneal.FloatPairVector_rend(self)

    def clear(self):
        return _simanneal.FloatPairVector_clear(self)

    def get_allocator(self):
        return _simanneal.FloatPairVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.FloatPairVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.FloatPairVector_erase(self, *args)

    def __init__(self, *args):
        this = _simanneal.new_FloatPairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simanneal.FloatPairVector_push_back(self, x)

    def front(self):
        return _simanneal.FloatPairVector_front(self)

    def back(self):
        return _simanneal.FloatPairVector_back(self)

    def assign(self, n, x):
        return _simanneal.FloatPairVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.FloatPairVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.FloatPairVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.FloatPairVector_reserve(self, n)

    def capacity(self):
        return _simanneal.FloatPairVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_FloatPairVector
    __del__ = lambda self: None
FloatPairVector_swigregister = _simanneal.FloatPairVector_swigregister
FloatPairVector_swigregister(FloatPairVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.FloatVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.FloatVector___bool__(self)

    def __len__(self):
        return _simanneal.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.FloatVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.FloatVector_pop(self)

    def append(self, x):
        return _simanneal.FloatVector_append(self, x)

    def empty(self):
        return _simanneal.FloatVector_empty(self)

    def size(self):
        return _simanneal.FloatVector_size(self)

    def swap(self, v):
        return _simanneal.FloatVector_swap(self, v)

    def begin(self):
        return _simanneal.FloatVector_begin(self)

    def end(self):
        return _simanneal.FloatVector_end(self)

    def rbegin(self):
        return _simanneal.FloatVector_rbegin(self)

    def rend(self):
        return _simanneal.FloatVector_rend(self)

    def clear(self):
        return _simanneal.FloatVector_clear(self)

    def get_allocator(self):
        return _simanneal.FloatVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.FloatVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _simanneal.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simanneal.FloatVector_push_back(self, x)

    def front(self):
        return _simanneal.FloatVector_front(self)

    def back(self):
        return _simanneal.FloatVector_back(self)

    def assign(self, n, x):
        return _simanneal.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.FloatVector_reserve(self, n)

    def capacity(self):
        return _simanneal.FloatVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _simanneal.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.IntVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.IntVector___bool__(self)

    def __len__(self):
        return _simanneal.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.IntVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.IntVector_pop(self)

    def append(self, x):
        return _simanneal.IntVector_append(self, x)

    def empty(self):
        return _simanneal.IntVector_empty(self)

    def size(self):
        return _simanneal.IntVector_size(self)

    def swap(self, v):
        return _simanneal.IntVector_swap(self, v)

    def begin(self):
        return _simanneal.IntVector_begin(self)

    def end(self):
        return _simanneal.IntVector_end(self)

    def rbegin(self):
        return _simanneal.IntVector_rbegin(self)

    def rend(self):
        return _simanneal.IntVector_rend(self)

    def clear(self):
        return _simanneal.IntVector_clear(self)

    def get_allocator(self):
        return _simanneal.IntVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.IntVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _simanneal.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simanneal.IntVector_push_back(self, x)

    def front(self):
        return _simanneal.IntVector_front(self)

    def back(self):
        return _simanneal.IntVector_back(self)

    def assign(self, n, x):
        return _simanneal.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.IntVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.IntVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.IntVector_reserve(self, n)

    def capacity(self):
        return _simanneal.IntVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _simanneal.IntVector_swigregister
IntVector_swigregister(IntVector)

class IntVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.IntVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.IntVectorVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.IntVectorVector___bool__(self)

    def __len__(self):
        return _simanneal.IntVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.IntVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.IntVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.IntVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.IntVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.IntVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.IntVectorVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.IntVectorVector_pop(self)

    def append(self, x):
        return _simanneal.IntVectorVector_append(self, x)

    def empty(self):
        return _simanneal.IntVectorVector_empty(self)

    def size(self):
        return _simanneal.IntVectorVector_size(self)

    def swap(self, v):
        return _simanneal.IntVectorVector_swap(self, v)

    def begin(self):
        return _simanneal.IntVectorVector_begin(self)

    def end(self):
        return _simanneal.IntVectorVector_end(self)

    def rbegin(self):
        return _simanneal.IntVectorVector_rbegin(self)

    def rend(self):
        return _simanneal.IntVectorVector_rend(self)

    def clear(self):
        return _simanneal.IntVectorVector_clear(self)

    def get_allocator(self):
        return _simanneal.IntVectorVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.IntVectorVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.IntVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _simanneal.new_IntVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simanneal.IntVectorVector_push_back(self, x)

    def front(self):
        return _simanneal.IntVectorVector_front(self)

    def back(self):
        return _simanneal.IntVectorVector_back(self)

    def assign(self, n, x):
        return _simanneal.IntVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.IntVectorVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.IntVectorVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.IntVectorVector_reserve(self, n)

    def capacity(self):
        return _simanneal.IntVectorVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_IntVectorVector
    __del__ = lambda self: None
IntVectorVector_swigregister = _simanneal.IntVectorVector_swigregister
IntVectorVector_swigregister(IntVectorVector)

class StringPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _simanneal.new_StringPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _simanneal.StringPair_first_set
    __swig_getmethods__["first"] = _simanneal.StringPair_first_get
    if _newclass:
        first = _swig_property(_simanneal.StringPair_first_get, _simanneal.StringPair_first_set)
    __swig_setmethods__["second"] = _simanneal.StringPair_second_set
    __swig_getmethods__["second"] = _simanneal.StringPair_second_get
    if _newclass:
        second = _swig_property(_simanneal.StringPair_second_get, _simanneal.StringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _simanneal.delete_StringPair
    __del__ = lambda self: None
StringPair_swigregister = _simanneal.StringPair_swigregister
StringPair_swigregister(StringPair)

class StringPairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPairVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.StringPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.StringPairVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.StringPairVector___bool__(self)

    def __len__(self):
        return _simanneal.StringPairVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.StringPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.StringPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.StringPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.StringPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.StringPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.StringPairVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.StringPairVector_pop(self)

    def append(self, x):
        return _simanneal.StringPairVector_append(self, x)

    def empty(self):
        return _simanneal.StringPairVector_empty(self)

    def size(self):
        return _simanneal.StringPairVector_size(self)

    def swap(self, v):
        return _simanneal.StringPairVector_swap(self, v)

    def begin(self):
        return _simanneal.StringPairVector_begin(self)

    def end(self):
        return _simanneal.StringPairVector_end(self)

    def rbegin(self):
        return _simanneal.StringPairVector_rbegin(self)

    def rend(self):
        return _simanneal.StringPairVector_rend(self)

    def clear(self):
        return _simanneal.StringPairVector_clear(self)

    def get_allocator(self):
        return _simanneal.StringPairVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.StringPairVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.StringPairVector_erase(self, *args)

    def __init__(self, *args):
        this = _simanneal.new_StringPairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simanneal.StringPairVector_push_back(self, x)

    def front(self):
        return _simanneal.StringPairVector_front(self)

    def back(self):
        return _simanneal.StringPairVector_back(self)

    def assign(self, n, x):
        return _simanneal.StringPairVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.StringPairVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.StringPairVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.StringPairVector_reserve(self, n)

    def capacity(self):
        return _simanneal.StringPairVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_StringPairVector
    __del__ = lambda self: None
StringPairVector_swigregister = _simanneal.StringPairVector_swigregister
StringPairVector_swigregister(StringPairVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.StringVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.StringVector___bool__(self)

    def __len__(self):
        return _simanneal.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.StringVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.StringVector_pop(self)

    def append(self, x):
        return _simanneal.StringVector_append(self, x)

    def empty(self):
        return _simanneal.StringVector_empty(self)

    def size(self):
        return _simanneal.StringVector_size(self)

    def swap(self, v):
        return _simanneal.StringVector_swap(self, v)

    def begin(self):
        return _simanneal.StringVector_begin(self)

    def end(self):
        return _simanneal.StringVector_end(self)

    def rbegin(self):
        return _simanneal.StringVector_rbegin(self)

    def rend(self):
        return _simanneal.StringVector_rend(self)

    def clear(self):
        return _simanneal.StringVector_clear(self)

    def get_allocator(self):
        return _simanneal.StringVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.StringVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _simanneal.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simanneal.StringVector_push_back(self, x)

    def front(self):
        return _simanneal.StringVector_front(self)

    def back(self):
        return _simanneal.StringVector_back(self)

    def assign(self, n, x):
        return _simanneal.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.StringVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.StringVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.StringVector_reserve(self, n)

    def capacity(self):
        return _simanneal.StringVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _simanneal.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.StringVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.StringVector2D___nonzero__(self)

    def __bool__(self):
        return _simanneal.StringVector2D___bool__(self)

    def __len__(self):
        return _simanneal.StringVector2D___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.StringVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.StringVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.StringVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.StringVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.StringVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.StringVector2D___setitem__(self, *args)

    def pop(self):
        return _simanneal.StringVector2D_pop(self)

    def append(self, x):
        return _simanneal.StringVector2D_append(self, x)

    def empty(self):
        return _simanneal.StringVector2D_empty(self)

    def size(self):
        return _simanneal.StringVector2D_size(self)

    def swap(self, v):
        return _simanneal.StringVector2D_swap(self, v)

    def begin(self):
        return _simanneal.StringVector2D_begin(self)

    def end(self):
        return _simanneal.StringVector2D_end(self)

    def rbegin(self):
        return _simanneal.StringVector2D_rbegin(self)

    def rend(self):
        return _simanneal.StringVector2D_rend(self)

    def clear(self):
        return _simanneal.StringVector2D_clear(self)

    def get_allocator(self):
        return _simanneal.StringVector2D_get_allocator(self)

    def pop_back(self):
        return _simanneal.StringVector2D_pop_back(self)

    def erase(self, *args):
        return _simanneal.StringVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _simanneal.new_StringVector2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simanneal.StringVector2D_push_back(self, x)

    def front(self):
        return _simanneal.StringVector2D_front(self)

    def back(self):
        return _simanneal.StringVector2D_back(self)

    def assign(self, n, x):
        return _simanneal.StringVector2D_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.StringVector2D_resize(self, *args)

    def insert(self, *args):
        return _simanneal.StringVector2D_insert(self, *args)

    def reserve(self, n):
        return _simanneal.StringVector2D_reserve(self, n)

    def capacity(self):
        return _simanneal.StringVector2D_capacity(self)
    __swig_destroy__ = _simanneal.delete_StringVector2D
    __del__ = lambda self: None
StringVector2D_swigregister = _simanneal.StringVector2D_swigregister
StringVector2D_swigregister(StringVector2D)

class StringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.StringMap___nonzero__(self)

    def __bool__(self):
        return _simanneal.StringMap___bool__(self)

    def __len__(self):
        return _simanneal.StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _simanneal.StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _simanneal.StringMap___delitem__(self, key)

    def has_key(self, key):
        return _simanneal.StringMap_has_key(self, key)

    def keys(self):
        return _simanneal.StringMap_keys(self)

    def values(self):
        return _simanneal.StringMap_values(self)

    def items(self):
        return _simanneal.StringMap_items(self)

    def __contains__(self, key):
        return _simanneal.StringMap___contains__(self, key)

    def key_iterator(self):
        return _simanneal.StringMap_key_iterator(self)

    def value_iterator(self):
        return _simanneal.StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _simanneal.StringMap___setitem__(self, *args)

    def asdict(self):
        return _simanneal.StringMap_asdict(self)

    def __init__(self, *args):
        this = _simanneal.new_StringMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _simanneal.StringMap_empty(self)

    def size(self):
        return _simanneal.StringMap_size(self)

    def swap(self, v):
        return _simanneal.StringMap_swap(self, v)

    def begin(self):
        return _simanneal.StringMap_begin(self)

    def end(self):
        return _simanneal.StringMap_end(self)

    def rbegin(self):
        return _simanneal.StringMap_rbegin(self)

    def rend(self):
        return _simanneal.StringMap_rend(self)

    def clear(self):
        return _simanneal.StringMap_clear(self)

    def get_allocator(self):
        return _simanneal.StringMap_get_allocator(self)

    def count(self, x):
        return _simanneal.StringMap_count(self, x)

    def erase(self, *args):
        return _simanneal.StringMap_erase(self, *args)

    def find(self, x):
        return _simanneal.StringMap_find(self, x)

    def lower_bound(self, x):
        return _simanneal.StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _simanneal.StringMap_upper_bound(self, x)
    __swig_destroy__ = _simanneal.delete_StringMap
    __del__ = lambda self: None
StringMap_swigregister = _simanneal.StringMap_swigregister
StringMap_swigregister(StringMap)

class ConfigVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.ConfigVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.ConfigVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.ConfigVector___bool__(self)

    def __len__(self):
        return _simanneal.ConfigVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.ConfigVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.ConfigVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.ConfigVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.ConfigVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.ConfigVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.ConfigVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.ConfigVector_pop(self)

    def append(self, x):
        return _simanneal.ConfigVector_append(self, x)

    def empty(self):
        return _simanneal.ConfigVector_empty(self)

    def size(self):
        return _simanneal.ConfigVector_size(self)

    def swap(self, v):
        return _simanneal.ConfigVector_swap(self, v)

    def begin(self):
        return _simanneal.ConfigVector_begin(self)

    def end(self):
        return _simanneal.ConfigVector_end(self)

    def rbegin(self):
        return _simanneal.ConfigVector_rbegin(self)

    def rend(self):
        return _simanneal.ConfigVector_rend(self)

    def clear(self):
        return _simanneal.ConfigVector_clear(self)

    def get_allocator(self):
        return _simanneal.ConfigVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.ConfigVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.ConfigVector_erase(self, *args)

    def __init__(self, *args):
        this = _simanneal.new_ConfigVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simanneal.ConfigVector_push_back(self, x)

    def front(self):
        return _simanneal.ConfigVector_front(self)

    def back(self):
        return _simanneal.ConfigVector_back(self)

    def assign(self, n, x):
        return _simanneal.ConfigVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.ConfigVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.ConfigVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.ConfigVector_reserve(self, n)

    def capacity(self):
        return _simanneal.ConfigVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_ConfigVector
    __del__ = lambda self: None
ConfigVector_swigregister = _simanneal.ConfigVector_swigregister
ConfigVector_swigregister(ConfigVector)

# This file is compatible with both classic and new-style classes.


